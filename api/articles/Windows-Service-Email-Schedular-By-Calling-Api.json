{"title":"Windows Service Email Schedular(By Calling Api)","slug":"Windows-Service-Email-Schedular-By-Calling-Api","date":"2018-08-26T06:29:24.000Z","updated":"2018-09-10T08:07:30.328Z","comments":true,"path":"api/articles/Windows-Service-Email-Schedular-By-Calling-Api.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h2 id=\"Using-Windows-Service-To-Call-API\"><a href=\"#Using-Windows-Service-To-Call-API\" class=\"headerlink\" title=\"Using Windows Service To Call API\"></a>Using Windows Service To Call API</h2><hr>\n<p>Background: This week I set up a windows service to call my website API so that I can send unread notification weekly to our customers. I would like to share the process I have done so that you can save some time if you would like to do the same thing.</p>\n<p>Before read this blog I recommend you to have a look at Hangfire and quartz.net. If you find they are more suitable for you just jump to it. As windows service is not a suitable way to do scheduling in many cases.</p>\n<hr>\n<h4 id=\"Why-Windows-Service\"><a href=\"#Why-Windows-Service\" class=\"headerlink\" title=\"Why Windows Service?\"></a>Why Windows Service?</h4><p>I know there are some more continent ways to do the same thing especially on some cloud platform e.g. AWS, Azure… Because when I develop this feature I do not have the permission to access our AWS server and I am not familiar with AWS scheduler so that I choose windows service which is a bit of  legacy. I am pretty sure this is not the best option to do this Email Scheduler. I will keep updating this once I find a better solution.</p>\n<h4 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite:\"></a>Prerequisite:</h4><p>You need to install visual studio(I use VS2017) and then create new <strong>windows service</strong> project(under Visual C#-&gt; Windows Desktop -&gt; Windows Service(.Net Framework))</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1:\"></a>Step 1:</h4><p>In the <strong>Service1.cs</strong> file right click on the black area then click <strong>add installer</strong> then you should see two methods on the screen. Double click on any of them you should see this code below.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class ProjectInstaller : System.Configuration.Install.Installer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        public ProjectInstaller()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        private void serviceProcessInstaller1_AfterInstall(object sender, InstallEventArgs e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        private void serviceInstaller1_AfterInstall(object sender, InstallEventArgs e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Go to the definition of <strong>InitializeComponent()</strong> you should find the code snippiest below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void InitializeComponent()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();</span><br><span class=\"line\">    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceProcessInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceProcessInstaller1.Password = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.Username = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceInstaller1.ServiceName = &quot;Service1&quot;;</span><br><span class=\"line\">    this.serviceInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // ProjectInstaller</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.Installers.AddRange(new System.Configuration.Install.Installer[] &#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1,</span><br><span class=\"line\">    this.serviceInstaller1&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can change some settings of our installer.</p>\n<p>After changes my <strong>InitializeComponent()</strong> is like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void InitializeComponent()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1 = new \t          System.ServiceProcess.ServiceProcessInstaller();</span><br><span class=\"line\">    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceProcessInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceProcessInstaller1.AccountSystem.ServiceProcess.ServiceAccount.LocalSystem;</span><br><span class=\"line\">    this.serviceProcessInstaller1.Password = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.Username = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceInstaller1.Description = &quot;Test&quot;;</span><br><span class=\"line\">    this.serviceInstaller1.DisplayName = &quot;Test&quot;;</span><br><span class=\"line\">    this.serviceInstaller1.ServiceName = &quot;Test&quot;;</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // ProjectInstaller</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.Installers.AddRange(new System.Configuration.Install.Installer[]     &#123;</span><br><span class=\"line\">        this.serviceProcessInstaller1,</span><br><span class=\"line\">\t    this.serviceInstaller1</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You can notice that I changed four lines in this method. The first one is the installation method. And the other three is name and descriptions.</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><p>After done with the installer we can move on to the main content of our service. Now let’s go to the <strong>service1.cs</strong> file<br>There are three important method we need to understand. <strong>OnStart()</strong>,<strong>OnStop()</strong>,<br><strong>OnElapsedTime()</strong>. We need to use OnStart and OnElaspsedTime for this example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override void OnStart(string[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WriteToFile(&quot;Service is started at &quot; + DateTime.Now);</span><br><span class=\"line\">    _timer.Elapsed += OnElapsedTime;</span><br><span class=\"line\">    _timer.Interval =</span><br><span class=\"line\"> Convert.ToDouble(ConfigurationManager.AppSettings[&quot;TimerInterval&quot;]); </span><br><span class=\"line\">    _timer.Enabled = true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This is my OnStart method. I use WriteToFile to do the log. I think it is a good practice to write your time related information in your setting file. You can see the <strong>TimeInterval</strong> is from my <strong>App.config</strong> file<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;appSettings&gt;</span><br><span class=\"line\">    &lt;add key=&quot;TimerInterval&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">&lt;/appSettings&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Below is the WriteToFile method I use. This mainly for loggin my service running condition.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void WriteToFile(string message)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var path = AppDomain.CurrentDomain.BaseDirectory + &quot;\\\\Logs&quot;;</span><br><span class=\"line\">    if (!Directory.Exists(path))</span><br><span class=\"line\">        Directory.CreateDirectory(path);</span><br><span class=\"line\">    var filepath = AppDomain.CurrentDomain.BaseDirectory + &quot;\\\\Logs\\\\ServiceLog_&quot; + DateTime.Now.Date.ToShortDateString().Replace(&apos;/&apos;, &apos;_&apos;) + &quot;.txt&quot;;</span><br><span class=\"line\">    if (!File.Exists(filepath))</span><br><span class=\"line\">    using (var sw = File.CreateText(filepath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    sw.WriteLine(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    using (var sw = File.AppendText(filepath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    sw.WriteLine(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3-important\"><a href=\"#Step-3-important\" class=\"headerlink\" title=\"Step 3(!important)\"></a>Step 3(!important)</h4><p><strong>OnElapsedTime()</strong> this is place we will execute our program.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void OnElapsedTime(object source, ElapsedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var userMessageAlertTime = ConfigurationManager.AppSettings[&quot;UserMessagesAlert&quot;];</span><br><span class=\"line\">    var adminProjectAlertTime = ConfigurationManager.AppSettings[&quot;AdminProjectUpdates&quot;];</span><br><span class=\"line\">    if (CheckTimeMatch(userMessageAlertTime,e.SignalTime))</span><br><span class=\"line\">NewMessageNotification();</span><br><span class=\"line\">    if (CheckTimeMatch(adminProjectAlertTime, e.SignalTime))</span><br><span class=\"line\">ProjectUpdatesNotification();</span><br><span class=\"line\">    WriteToFile(&quot;Service is recall at &quot; + DateTime.UtcNow);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Once the time match with time in my config file I will call this api. The api detail is also in my setting.</p>\n<p>There is important thing to do is the security I will talk about it in the near future.</p>\n<h4 id=\"Step-4-Deployment\"><a href=\"#Step-4-Deployment\" class=\"headerlink\" title=\"Step 4 Deployment\"></a>Step 4 Deployment</h4><p>Finally we need to deploy our program. first build your project in visual studio. Then open your <strong>CMD</strong> as Admin(right click - run as administrator )</p>\n<p><strong>Installation:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe&quot; &quot;C:\\Users\\Gatehouse\\source\\repos\\WindowsServiceTest\\WindowsServiceTest\\bin\\Debug\\WindowsServiceTest.exe&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>Uninstallation:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe&quot; -u  &quot;C:\\Users\\Gatehouse\\source\\repos\\WindowsServiceTest\\WindowsServiceTest\\bin\\Debug\\WindowsServiceTest.exe&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Step 5 Run This Service</strong></p>\n<p>After deployment you should see your service in the service list(cmd -&gt; enter service).</p>\n<p>If there is no problem after you right click on service and select run. Your service should be ready. You can check your log folder.</p>\n<p>I will update once I find better practice.</p>\n","categories":[],"tags":[]}