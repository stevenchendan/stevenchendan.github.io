{"total":2,"pageSize":10,"pageCount":1,"data":[{"title":"Test","slug":"hello-world","date":"2018-08-28T11:20:46.143Z","updated":"2018-08-28T11:20:46.149Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Windows Service Email Schedular(By Calling Api)","slug":"Windows-Service-Email-Schedular-By-Calling-Api","date":"2018-08-26T06:29:24.000Z","updated":"2018-08-28T11:20:46.141Z","comments":true,"path":"api/articles/Windows-Service-Email-Schedular-By-Calling-Api.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Using-Windows-Service-To-Call-API\"><a href=\"#Using-Windows-Service-To-Call-API\" class=\"headerlink\" title=\"Using Windows Service To Call API\"></a>Using Windows Service To Call API</h2><hr>\n<p>Background: This week I set up a windows service to call my website API so that I can send unread notification weekly to our customers. I would like to share the process I have done so that you can save some time if you would like to do the same thing.</p>\n<h4 id=\"Why-Windows-Service\"><a href=\"#Why-Windows-Service\" class=\"headerlink\" title=\"Why Windows Service?\"></a>Why Windows Service?</h4><p>I know there are some more continent ways to do the same thing especially on some cloud platform e.g. AWS, Azure… Because when I develop this feature I do not have the permission to access our AWS server and I am not familiar with AWS scheduler so that I choose windows service which is a bit of  legacy. I am pretty sure this is not the best option to do this Email Scheduler. I will keep updating this once I find a better solution.</p>\n<h4 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite:\"></a>Prerequisite:</h4><p>You need to install visual studio(I use VS2017) and then create new <strong>windows service</strong> project(under Visual C#-&gt; Windows Desktop -&gt; Windows Service(.Net Framework))</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1:\"></a>Step 1:</h4><p>In the <strong>Service1.cs</strong> file right click on the black area then click <strong>add installer</strong> then you should see two methods on the screen. Double click on any of them you should see this code below.</p>\n<pre><code>public partial class ProjectInstaller : System.Configuration.Install.Installer\n{\n    public ProjectInstaller()\n    {\n        InitializeComponent();\n    }\n\n    private void serviceProcessInstaller1_AfterInstall(object sender, InstallEventArgs e)\n    {\n\n    }\n\n    private void serviceInstaller1_AfterInstall(object sender, InstallEventArgs e)\n    {\n\n    }\n}\n</code></pre><p>Go to the definition of <strong>InitializeComponent()</strong> you should find the code snippiest below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void InitializeComponent()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();</span><br><span class=\"line\">    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceProcessInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceProcessInstaller1.Password = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.Username = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceInstaller1.ServiceName = &quot;Service1&quot;;</span><br><span class=\"line\">    this.serviceInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // ProjectInstaller</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.Installers.AddRange(new System.Configuration.Install.Installer[] &#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1,</span><br><span class=\"line\">    this.serviceInstaller1&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can change some settings of our installer.</p>\n<p>After changes my <strong>InitializeComponent()</strong> is like this:</p>\n<p>private void InitializeComponent()<br>{<br>        this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();<br>        this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();<br>        //<br>        // serviceProcessInstaller1<br>        //<br>        <strong>this.serviceProcessInstaller1.AccountSystem.ServiceProcess.ServiceAccount.LocalSystem;</strong><br>        this.serviceProcessInstaller1.Password = null;<br>        this.serviceProcessInstaller1.Username = null;<br>        this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);<br>        //<br>        // serviceInstaller1<br>        //<br>        <strong>this.serviceInstaller1.Description = “Test”;</strong><br>        <strong>this.serviceInstaller1.DisplayName = “Test”;</strong><br>        <strong>this.serviceInstaller1.ServiceName = “Test”;</strong><br>        //<br>        // ProjectInstaller<br>        //<br>        this.Installers.AddRange(new System.Configuration.Install.Installer[] {<br>        this.serviceProcessInstaller1,<br>    this.serviceInstaller1});</p>\n<p>}</p>\n<p>You can notice that I changed four lines in this method. The first one is the installation method. And the other three is name and descriptions.</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><p>After done with the installer we can move on to the main content of our service. Now let’s go to the <strong>service1.cs</strong> file</p>\n","text":"Using Windows Service To Call APIBackground: This week I set up a windows service to call my website API so that I can send unread notificat","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}
