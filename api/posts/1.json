{"total":5,"pageSize":10,"pageCount":1,"data":[{"title":"Xero And .Net Core 2.1 Integration","slug":"Xero-And-Net-Core-2-1-Integration","date":"2018-11-21T05:37:40.000Z","updated":"2018-11-21T05:40:36.336Z","comments":true,"path":"api/articles/Xero-And-Net-Core-2-1-Integration.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Xero-And-Net-Core-2-1-Integration\"><a href=\"#Xero-And-Net-Core-2-1-Integration\" class=\"headerlink\" title=\"Xero And .Net Core 2.1 Integration\"></a>Xero And .Net Core 2.1 Integration</h2>","text":"Xero And .Net Core 2.1 Integration","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":".Net Core 2.1 Scheduler Hangfire Tutorial","slug":"Net-Core-2-1-Scheduler-Hangfire-Tutorial","date":"2018-09-18T22:37:21.000Z","updated":"2018-10-04T23:16:51.997Z","comments":true,"path":"api/articles/Net-Core-2-1-Scheduler-Hangfire-Tutorial.json","excerpt":"","keywords":null,"cover":"/2018/09/19/Net-Core-2-1-Scheduler-Hangfire-Tutorial/hangFire.PNG","content":"<h3 id=\"Scheduler-in-Net-Core-2-1-Hangfire-tutorial\"><a href=\"#Scheduler-in-Net-Core-2-1-Hangfire-tutorial\" class=\"headerlink\" title=\"Scheduler in .Net Core 2.1 - Hangfire tutorial\"></a>Scheduler in .Net Core 2.1 - Hangfire tutorial</h3><hr>\n<h4 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background:\"></a>Background:</h4><p>I used to setup my project scheduler by using windows service, mostly sending emails, then I find a better library to do this task – Hangfire. There are multiple reasons, the first is Hangfire is free!!! and then it provide dashboard to monitor and control your scheduled tasks, the last point is it is easy to setup.</p>\n<hr>\n<h4 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options:\"></a>Options:</h4><p>Before we get into this Hangfire tutorial make sure you compare all the libraries otherwise you need to refactor your application which is waste of time. After compare these options and ask a friend, I decided to use Hangfire to handle the scheduling emails.</p>\n<p><strong>Scheduler and Job</strong></p>\n<ul>\n<li><a href=\"https://github.com/leosperry/Chroniton\" target=\"_blank\" rel=\"noopener\">Chroniton.NetCore</a> - Lightweight robust library for running tasks(jobs) on schedules.</li>\n<li><a href=\"https://github.com/jamesmh/coravel\" target=\"_blank\" rel=\"noopener\">Coravel</a> - .Net Core meets Laravel: Scheduling, Queuing, etc.</li>\n<li><a href=\"https://github.com/fluentscheduler/FluentScheduler\" target=\"_blank\" rel=\"noopener\">FluentScheduler</a> - Automated job scheduler with fluent interface.</li>\n<li><a href=\"https://github.com/brthor/Gofer.NET\" target=\"_blank\" rel=\"noopener\">Gofer.NET</a> - Easy C# API for Distributed Background Tasks/Jobs for .NET Core. Inspired by celery for python.</li>\n<li><a href=\"https://github.com/HangfireIO/Hangfire\" target=\"_blank\" rel=\"noopener\">HangfireIO</a> - Easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET apps <a href=\"http://hangfire.io\" target=\"_blank\" rel=\"noopener\">http://hangfire.io</a>.</li>\n<li><a href=\"https://github.com/prasannavl/LiquidState\" target=\"_blank\" rel=\"noopener\">LiquidState</a> - Efficient asynchronous and synchronous state machines for .NET.</li>\n<li><a href=\"https://github.com/atifaziz/NCrontab\" target=\"_blank\" rel=\"noopener\">NCrontab</a> - Crontab for .NET.</li>\n<li><a href=\"https://github.com/quartznet/quartznet/\" target=\"_blank\" rel=\"noopener\">quartznet</a> - Quartz Enterprise Scheduler .NET <a href=\"http://www.quartz-scheduler.net\" target=\"_blank\" rel=\"noopener\">http://www.quartz-scheduler.net</a>.</li>\n<li><a href=\"https://github.com/dotnet-state-machine/stateless\" target=\"_blank\" rel=\"noopener\">stateless</a> - Simple library for creating state machines in C# code.</li>\n</ul>\n<p>This list comes from <a href=\"https://github.com/thangchung/awesome-dotnet-core\" target=\"_blank\" rel=\"noopener\">awesome-dotnet-core</a></p>\n<hr>\n<p>Step 1: Installation</p>\n<p>I use NUGET package to install this library. I install these three library.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;PackageReference Include=&quot;Hangfire.AspNetCore&quot; Version=&quot;1.6.20&quot; /&gt;</span><br><span class=\"line\">&lt;PackageReference Include=&quot;Hangfire.Dashboard.Authorization&quot; Version=&quot;2.1.0&quot; /&gt;</span><br><span class=\"line\">&lt;PackageReference Include=&quot;Hangfire.SqlServer&quot; Version=&quot;1.6.20&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>You can search them in NuGet Package Manager. The version number does not matter.</p>\n<p>Because I use .Net Core 2.1 so that I install Hangfire.AspNetCore rather than Hangfire please make sure you select the right one for your project. The Hangfire.Dashboard.Authorization is to implement the security feature which means it is optional and the SqlServer is a must-have.</p>\n<p>Step 2: Startup Configuration</p>\n<p>After the installation let’s go to the <strong>Startup.cs</strong> file then you need to do the following things.</p>\n<p>Under the </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void ConfigureServices(IServiceCollection services)</span><br></pre></td></tr></table></figure>\n<p>Add the following code. These codes is to configure the Hangfire can access your database. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.AddHangfire(config =&gt;</span><br><span class=\"line\">                config.UseSqlServerStorage(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));</span><br></pre></td></tr></table></figure>\n<p>Under the Configure</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br></pre></td></tr></table></figure>\n<p>Add the following code.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.UseHangfireDashboard();</span><br><span class=\"line\">app.UseHangfireServer();</span><br></pre></td></tr></table></figure>\n<p>After you run your application you should be able to see your hangfire dashboard now.</p>\n<p>by adding hangfire after your root url.</p>\n<img src=\"/2018/09/19/Net-Core-2-1-Scheduler-Hangfire-Tutorial/hangFire.PNG\" title=\"Dashboard\">\n<p>Step 3: Security Setup</p>\n<p>Before we put this into production we need to make sure that this page is not accessible by others.</p>\n<p>This is my new <strong>Configure</strong> method in <strong>Startup.cs</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseAuthentication();</span><br><span class=\"line\">    app.UseHangfireServer();</span><br><span class=\"line\">    app.UseHangfireDashboard(&quot;/hangfire&quot;, new DashboardOptions</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Authorization = new[] &#123; new HangfireAuthorizationFilter() &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    app.UseSignalR(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapHub&lt;ChatHub&gt;(&quot;/chat&quot;);</span><br><span class=\"line\">        routes.MapHub&lt;NotificationHub&gt;(&quot;/notification&quot;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(</span><br><span class=\"line\">            &quot;default&quot;,</span><br><span class=\"line\">            &quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And My HangfireAuthorizationFilter is like this you can use your own code.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HangfireAuthorizationFilter : IDashboardAuthorizationFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Authorize(DashboardContext context)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var httpContext = context.GetHttpContext();</span><br><span class=\"line\"></span><br><span class=\"line\">        return httpContext.User.IsAdmin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Step 4: Hangfire Controller</p>\n<p>The next step is to write the Hangfire jobs this depends on your needs I write the code in my Hangfire controller, but write it in your startup.cs is ok but not easy to maintain.</p>\n<p>Here is the example of recurrent jobs.</p>\n<p><a href=\"http://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html\" target=\"_blank\" rel=\"noopener\">http://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html</a></p>\n<p>Step 5: Deployment</p>\n<p>After deploy to your testing/staging/production please do not forget to change the IIS setting if your application is not a heavily used website. After a while your iis will sleep. </p>\n<p>The solution is to change IIS start mode to <em>always running</em> and on the website, set <em>Preload Enable</em> to true. For doing this you need to have Application Initialization module enabled on IIS.</p>\n<p>For more information you can check this page:</p>\n<p><a href=\"https://stackoverflow.com/questions/35480661/iis-8-5-application-initialization-not-working\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/35480661/iis-8-5-application-initialization-not-working</a>   </p>\n<p>Tip:</p>\n<p>How to delete jobs:</p>\n<p>To be continue</p>\n<p>Related Resources:</p>\n<p>These are some useful resources, maybe you will find them useful.</p>\n<p><a href=\"https://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx\" target=\"_blank\" rel=\"noopener\">https://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx</a></p>\n<p><a href=\"https://dotnetthoughts.net/integrate-hangfire-with-aspnet-core/\" target=\"_blank\" rel=\"noopener\">https://dotnetthoughts.net/integrate-hangfire-with-aspnet-core/</a></p>\n<p><a href=\"http://docs.hangfire.io/en/latest/configuration/using-sql-server.html\" target=\"_blank\" rel=\"noopener\">http://docs.hangfire.io/en/latest/configuration/using-sql-server.html</a></p>\n<p><a href=\"https://codingsight.com/hangfire-task-scheduler-for-net/\" target=\"_blank\" rel=\"noopener\">https://codingsight.com/hangfire-task-scheduler-for-net/</a></p>\n<p><a href=\"https://samueleresca.net/2017/12/background-tasks-in-asp-net-core/\" target=\"_blank\" rel=\"noopener\">https://samueleresca.net/2017/12/background-tasks-in-asp-net-core/</a></p>\n<p><a href=\"http://www.talkingdotnet.com/integrate-hangfire-with-asp-net-core-web-api/\" target=\"_blank\" rel=\"noopener\">http://www.talkingdotnet.com/integrate-hangfire-with-asp-net-core-web-api/</a></p>\n","text":"Scheduler in .Net Core 2.1 - Hangfire tutorialBackground:I used to setup my project scheduler by using windows service, mostly sending email","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Improve Website Performance by using bundling(.Net Core 2.1)","slug":"Improve-Website-Performance-by-using-bundling-Net-Core-2-1","date":"2018-08-30T10:19:41.000Z","updated":"2018-09-10T22:19:25.494Z","comments":true,"path":"api/articles/Improve-Website-Performance-by-using-bundling-Net-Core-2-1.json","excerpt":"","keywords":null,"cover":"/2018/08/30/Improve-Website-Performance-by-using-bundling-Net-Core-2-1/bundleFile.PNG","content":"<h3 id=\"How-to-do-bundling-in-Net-Core-Project\"><a href=\"#How-to-do-bundling-in-Net-Core-Project\" class=\"headerlink\" title=\"How to do bundling in .Net Core Project\"></a>How to do bundling in .Net Core Project</h3><hr>\n<p>Background: These days I would like to improve our website performance I have learned that there are some ways like code splitting, bundling and so on. I will start with bundling. So that I would like to share the process about how I did it. I do not promise this is the best practice but I hope this post can save you sometime once you would like to do the same thing.</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1:\"></a>Step 1:</h4><p>My project is a .Net Core project. Before you read my post I hope your can read the office document about how to do the bundling. Here is the official website: </p>\n<p>If you find this official document is not helpful let’s continue.</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2 :\"></a>Step 2 :</h4><p>Let’s go to the file called <strong>bundleconfig.json</strong> which is the file we can bundle our files together.</p>\n<img src=\"/2018/08/30/Improve-Website-Performance-by-using-bundling-Net-Core-2-1/bundleFile.PNG\" title=\"File Location\">\n<p>In this file you can see the existing code </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;outputFileName&quot;: &quot;wwwroot/js/site.min.js&quot;,</span><br><span class=\"line\">    &quot;inputFiles&quot;: [</span><br><span class=\"line\">      &quot;wwwroot/js/site.js&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;minify&quot;: &#123;</span><br><span class=\"line\">      &quot;enabled&quot;: true,</span><br><span class=\"line\">      &quot;renameLocals&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;outputFileName&quot;: &quot;wwwroot/css/site.min.css&quot;,</span><br><span class=\"line\">    &quot;inputFiles&quot;: [</span><br><span class=\"line\">      &quot;wwwroot/css/site.css&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;minify&quot;: &#123;</span><br><span class=\"line\">      &quot;enabled&quot;: true,</span><br><span class=\"line\">      &quot;renameLocals&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>This code is pretty much straightforward I think I do not need to explain anything. </p>\n<h4 id=\"Step-3-Download-Extension\"><a href=\"#Step-3-Download-Extension\" class=\"headerlink\" title=\"Step 3: Download Extension\"></a>Step 3: Download Extension</h4><p>I recommend you to use this extension called <strong>Bundler &amp; Minifier</strong> this is recommended by the official document. Here is the link of this extension: [Bundle &amp; Minifier]: <a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.BundlerMinifier\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.BundlerMinifier</a> you can also use nuget package to install it.</p>\n<p>Once you download this extension successfully we can select multiple .js or .css to bundle them together. After select them right click then you will find the option called: Bundle &amp; Minifier this is the one will help you bundle your files.</p>\n<img src=\"/2018/08/30/Improve-Website-Performance-by-using-bundling-Net-Core-2-1/bundleRightClick.png\" title=\"Bundle Option\">\n<p>Remeber that please do not change the order of the .js or .css becaue the loading sequence matters in our project. Before you do this bundle I think spilit your code is a good choice otherwise the landing page will be slow.</p>\n<h4 id=\"Step-4-Bundle-amp-Minifer-Setting\"><a href=\"#Step-4-Bundle-amp-Minifer-Setting\" class=\"headerlink\" title=\"Step 4: Bundle &amp; Minifer Setting\"></a>Step 4: Bundle &amp; Minifer Setting</h4><p>After we do the bundling  we can double check it in the <strong>bundleconfig.json</strong><br>Here is a example of mine bundleconfig file:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;outputFileName&quot;: &quot;wwwroot/js/site.min.js&quot;,</span><br><span class=\"line\">    &quot;inputFiles&quot;: [</span><br><span class=\"line\">      &quot;wwwroot/js/main.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/lodash.min.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/jodit.min.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/bootstrap-datepicker.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/axios.min.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/toastr.min.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/moment.min.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/daterangepicker.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/Scripts/SidebarScripts.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/manifest.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/slick.min.js&quot;,</span><br><span class=\"line\">      &quot;wwwroot/js/site.min.js&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;minify&quot;: &#123;</span><br><span class=\"line\">      &quot;enabled&quot;: true,</span><br><span class=\"line\">      &quot;renameLocals&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;outputFileName&quot;: &quot;wwwroot/css/site.min.css&quot;,</span><br><span class=\"line\">    &quot;inputFiles&quot;: [</span><br><span class=\"line\">      &quot;wwwroot/css/font-awesome.min.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/lib/bootstrap/dist/css/bootstrap.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/angular-material.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/styles.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/emoticons.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/vue-multiselect.min.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/lib/Croppie/croppie.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/jodit.min.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/datepicker3.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/toastr.min.css&quot;,</span><br><span class=\"line\">      &quot;wwwroot/css/site.css&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;minify&quot;: &#123;</span><br><span class=\"line\">      &quot;enabled&quot;: true,</span><br><span class=\"line\">      &quot;renameLocals&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Step-5-Build-Bundle-File\"><a href=\"#Step-5-Build-Bundle-File\" class=\"headerlink\" title=\"Step 5: Build Bundle File\"></a>Step 5: Build Bundle File</h4><p>After you finish do the setting we can build the bundle files.</p>\n<img src=\"/2018/08/30/Improve-Website-Performance-by-using-bundling-Net-Core-2-1/bundleRightClick.png\" title=\"Bundle Option\">\n<p>Click on the <strong>Task Runner Explorer</strong> options you can set the build time of the bundle files </p>\n<img src=\"/2018/08/30/Improve-Website-Performance-by-using-bundling-Net-Core-2-1/taskRunnerExplorer.png\" title=\"Task Runnder\">\n<p>you can update all files right now or you can set the build time of each file.</p>\n<h4 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h4><p>Please do remember include your bundle files(e.g. site.min.css or site.min.js ….) in your layout file<br>Now you can check from browser if your bundle file works or not.</p>\n","text":"How to do bundling in .Net Core ProjectBackground: These days I would like to improve our website performance I have learned that there are ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":".Net Core","slug":"Net-Core","count":1,"path":"api/tags/Net-Core.json"},{"name":"Web Performance","slug":"Web-Performance","count":1,"path":"api/tags/Web-Performance.json"}]},{"title":"Windows Service Email Schedular(By Calling Api)","slug":"Windows-Service-Email-Schedular-By-Calling-Api","date":"2018-08-26T06:29:24.000Z","updated":"2018-09-10T08:07:30.328Z","comments":true,"path":"api/articles/Windows-Service-Email-Schedular-By-Calling-Api.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"Using-Windows-Service-To-Call-API\"><a href=\"#Using-Windows-Service-To-Call-API\" class=\"headerlink\" title=\"Using Windows Service To Call API\"></a>Using Windows Service To Call API</h2><hr>\n<p>Background: This week I set up a windows service to call my website API so that I can send unread notification weekly to our customers. I would like to share the process I have done so that you can save some time if you would like to do the same thing.</p>\n<p>Before read this blog I recommend you to have a look at Hangfire and quartz.net. If you find they are more suitable for you just jump to it. As windows service is not a suitable way to do scheduling in many cases.</p>\n<hr>\n<h4 id=\"Why-Windows-Service\"><a href=\"#Why-Windows-Service\" class=\"headerlink\" title=\"Why Windows Service?\"></a>Why Windows Service?</h4><p>I know there are some more continent ways to do the same thing especially on some cloud platform e.g. AWS, Azure… Because when I develop this feature I do not have the permission to access our AWS server and I am not familiar with AWS scheduler so that I choose windows service which is a bit of  legacy. I am pretty sure this is not the best option to do this Email Scheduler. I will keep updating this once I find a better solution.</p>\n<h4 id=\"Prerequisite\"><a href=\"#Prerequisite\" class=\"headerlink\" title=\"Prerequisite:\"></a>Prerequisite:</h4><p>You need to install visual studio(I use VS2017) and then create new <strong>windows service</strong> project(under Visual C#-&gt; Windows Desktop -&gt; Windows Service(.Net Framework))</p>\n<h4 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1:\"></a>Step 1:</h4><p>In the <strong>Service1.cs</strong> file right click on the black area then click <strong>add installer</strong> then you should see two methods on the screen. Double click on any of them you should see this code below.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public partial class ProjectInstaller : System.Configuration.Install.Installer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        public ProjectInstaller()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        private void serviceProcessInstaller1_AfterInstall(object sender, InstallEventArgs e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        private void serviceInstaller1_AfterInstall(object sender, InstallEventArgs e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Go to the definition of <strong>InitializeComponent()</strong> you should find the code snippiest below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void InitializeComponent()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();</span><br><span class=\"line\">    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceProcessInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceProcessInstaller1.Password = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.Username = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceInstaller1.ServiceName = &quot;Service1&quot;;</span><br><span class=\"line\">    this.serviceInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // ProjectInstaller</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.Installers.AddRange(new System.Configuration.Install.Installer[] &#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1,</span><br><span class=\"line\">    this.serviceInstaller1&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We can change some settings of our installer.</p>\n<p>After changes my <strong>InitializeComponent()</strong> is like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void InitializeComponent()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.serviceProcessInstaller1 = new \t          System.ServiceProcess.ServiceProcessInstaller();</span><br><span class=\"line\">    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceProcessInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceProcessInstaller1.AccountSystem.ServiceProcess.ServiceAccount.LocalSystem;</span><br><span class=\"line\">    this.serviceProcessInstaller1.Password = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.Username = null;</span><br><span class=\"line\">    this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // serviceInstaller1</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.serviceInstaller1.Description = &quot;Test&quot;;</span><br><span class=\"line\">    this.serviceInstaller1.DisplayName = &quot;Test&quot;;</span><br><span class=\"line\">    this.serviceInstaller1.ServiceName = &quot;Test&quot;;</span><br><span class=\"line\">    // </span><br><span class=\"line\">    // ProjectInstaller</span><br><span class=\"line\">    // </span><br><span class=\"line\">    this.Installers.AddRange(new System.Configuration.Install.Installer[]     &#123;</span><br><span class=\"line\">        this.serviceProcessInstaller1,</span><br><span class=\"line\">\t    this.serviceInstaller1</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You can notice that I changed four lines in this method. The first one is the installation method. And the other three is name and descriptions.</p>\n<h4 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h4><p>After done with the installer we can move on to the main content of our service. Now let’s go to the <strong>service1.cs</strong> file<br>There are three important method we need to understand. <strong>OnStart()</strong>,<strong>OnStop()</strong>,<br><strong>OnElapsedTime()</strong>. We need to use OnStart and OnElaspsedTime for this example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override void OnStart(string[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WriteToFile(&quot;Service is started at &quot; + DateTime.Now);</span><br><span class=\"line\">    _timer.Elapsed += OnElapsedTime;</span><br><span class=\"line\">    _timer.Interval =</span><br><span class=\"line\"> Convert.ToDouble(ConfigurationManager.AppSettings[&quot;TimerInterval&quot;]); </span><br><span class=\"line\">    _timer.Enabled = true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This is my OnStart method. I use WriteToFile to do the log. I think it is a good practice to write your time related information in your setting file. You can see the <strong>TimeInterval</strong> is from my <strong>App.config</strong> file<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;appSettings&gt;</span><br><span class=\"line\">    &lt;add key=&quot;TimerInterval&quot; value=&quot;60000&quot;/&gt;</span><br><span class=\"line\">&lt;/appSettings&gt;</span><br></pre></td></tr></table></figure></p>\n<p>Below is the WriteToFile method I use. This mainly for loggin my service running condition.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void WriteToFile(string message)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var path = AppDomain.CurrentDomain.BaseDirectory + &quot;\\\\Logs&quot;;</span><br><span class=\"line\">    if (!Directory.Exists(path))</span><br><span class=\"line\">        Directory.CreateDirectory(path);</span><br><span class=\"line\">    var filepath = AppDomain.CurrentDomain.BaseDirectory + &quot;\\\\Logs\\\\ServiceLog_&quot; + DateTime.Now.Date.ToShortDateString().Replace(&apos;/&apos;, &apos;_&apos;) + &quot;.txt&quot;;</span><br><span class=\"line\">    if (!File.Exists(filepath))</span><br><span class=\"line\">    using (var sw = File.CreateText(filepath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    sw.WriteLine(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    using (var sw = File.AppendText(filepath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    sw.WriteLine(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-3-important\"><a href=\"#Step-3-important\" class=\"headerlink\" title=\"Step 3(!important)\"></a>Step 3(!important)</h4><p><strong>OnElapsedTime()</strong> this is place we will execute our program.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void OnElapsedTime(object source, ElapsedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var userMessageAlertTime = ConfigurationManager.AppSettings[&quot;UserMessagesAlert&quot;];</span><br><span class=\"line\">    var adminProjectAlertTime = ConfigurationManager.AppSettings[&quot;AdminProjectUpdates&quot;];</span><br><span class=\"line\">    if (CheckTimeMatch(userMessageAlertTime,e.SignalTime))</span><br><span class=\"line\">NewMessageNotification();</span><br><span class=\"line\">    if (CheckTimeMatch(adminProjectAlertTime, e.SignalTime))</span><br><span class=\"line\">ProjectUpdatesNotification();</span><br><span class=\"line\">    WriteToFile(&quot;Service is recall at &quot; + DateTime.UtcNow);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Once the time match with time in my config file I will call this api. The api detail is also in my setting.</p>\n<p>There is important thing to do is the security I will talk about it in the near future.</p>\n<h4 id=\"Step-4-Deployment\"><a href=\"#Step-4-Deployment\" class=\"headerlink\" title=\"Step 4 Deployment\"></a>Step 4 Deployment</h4><p>Finally we need to deploy our program. first build your project in visual studio. Then open your <strong>CMD</strong> as Admin(right click - run as administrator )</p>\n<p><strong>Installation:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe&quot; &quot;C:\\Users\\Gatehouse\\source\\repos\\WindowsServiceTest\\WindowsServiceTest\\bin\\Debug\\WindowsServiceTest.exe&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>Uninstallation:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe&quot; -u  &quot;C:\\Users\\Gatehouse\\source\\repos\\WindowsServiceTest\\WindowsServiceTest\\bin\\Debug\\WindowsServiceTest.exe&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Step 5 Run This Service</strong></p>\n<p>After deployment you should see your service in the service list(cmd -&gt; enter service).</p>\n<p>If there is no problem after you right click on service and select run. Your service should be ready. You can check your log folder.</p>\n<p>I will update once I find better practice.</p>\n","text":"Using Windows Service To Call APIBackground: This week I set up a windows service to call my website API so that I can send unread notificat","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Test","slug":"hello-world","date":"2018-08-15T08:32:40.875Z","updated":"2018-08-26T10:38:32.259Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]}]}