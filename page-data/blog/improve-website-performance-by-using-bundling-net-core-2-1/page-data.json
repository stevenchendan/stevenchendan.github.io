{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/improve-website-performance-by-using-bundling-net-core-2-1","result":{"data":{"markdownRemark":{"html":"<h3 id=\"how-to-do-bundling-in-net-core-project\" style=\"position:relative;\"><a href=\"#how-to-do-bundling-in-net-core-project\" aria-label=\"how to do bundling in net core project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to do bundling in .Net Core Project</h3>\n<hr>\n<p>Background: These days I would like to improve our website performance I have learned that there are some ways like code splitting, bundling and so on. I will start with bundling. So that I would like to share the process about how I did it. I do not promise this is the best practice but I hope this post can save you sometime once you would like to do the same thing.</p>\n<h4 id=\"step-1\" style=\"position:relative;\"><a href=\"#step-1\" aria-label=\"step 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1:</h4>\n<p>My project is a .Net Core project. Before you read my post I hope your can read the office document about how to do the bundling. Here is the official website: </p>\n<p>If you find this official document is not helpful let's continue.</p>\n<h4 id=\"step-2-\" style=\"position:relative;\"><a href=\"#step-2-\" aria-label=\"step 2  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2 :</h4>\n<p>Let's go to the file called <strong>bundleconfig.json</strong> which is the file we can bundle our files together.</p>\n<p>{% asset_img \"bundleFile.PNG\" \"File Location\" %}</p>\n<p>In this file you can see the existing code </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    &quot;outputFileName&quot;: &quot;wwwroot/js/site.min.js&quot;,\n    &quot;inputFiles&quot;: [\n      &quot;wwwroot/js/site.js&quot;\n    ],\n    &quot;minify&quot;: {\n      &quot;enabled&quot;: true,\n      &quot;renameLocals&quot;: false\n    }\n  },\n  {\n    &quot;outputFileName&quot;: &quot;wwwroot/css/site.min.css&quot;,\n    &quot;inputFiles&quot;: [\n      &quot;wwwroot/css/site.css&quot;\n    ],\n    &quot;minify&quot;: {\n      &quot;enabled&quot;: true,\n      &quot;renameLocals&quot;: false\n    }\n  }\n]</code></pre></div>\n<p>This code is pretty much straightforward I think I do not need to explain anything. </p>\n<h4 id=\"step-3-download-extension\" style=\"position:relative;\"><a href=\"#step-3-download-extension\" aria-label=\"step 3 download extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Download Extension</h4>\n<p>I recommend you to use this extension called <strong>Bundler &#x26; Minifier</strong> this is recommended by the official document. Here is the link of this extension: [Bundle &#x26; Minifier]: <a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.BundlerMinifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marketplace.visualstudio.com/items?itemName=MadsKristensen.BundlerMinifier</a> you can also use nuget package to install it.</p>\n<p>Once you download this extension successfully we can select multiple .js or .css to bundle them together. After select them right click then you will find the option called: Bundle &#x26; Minifier this is the one will help you bundle your files.</p>\n<p>{% asset_img \"bundleRightClick.png\" \"Bundle Option\" %}</p>\n<p>Remeber that please do not change the order of the .js or .css becaue the loading sequence matters in our project. Before you do this bundle I think spilit your code is a good choice otherwise the landing page will be slow.</p>\n<h4 id=\"step-4-bundle--minifer-setting\" style=\"position:relative;\"><a href=\"#step-4-bundle--minifer-setting\" aria-label=\"step 4 bundle  minifer setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Bundle &#x26; Minifer Setting</h4>\n<p>After we do the bundling  we can double check it in the <strong>bundleconfig.json</strong>\nHere is a example of mine bundleconfig file: </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    &quot;outputFileName&quot;: &quot;wwwroot/js/site.min.js&quot;,\n    &quot;inputFiles&quot;: [\n      &quot;wwwroot/js/main.js&quot;,\n      &quot;wwwroot/js/lodash.min.js&quot;,\n      &quot;wwwroot/js/jodit.min.js&quot;,\n      &quot;wwwroot/js/bootstrap-datepicker.js&quot;,\n      &quot;wwwroot/js/axios.min.js&quot;,\n      &quot;wwwroot/js/toastr.min.js&quot;,\n      &quot;wwwroot/js/moment.min.js&quot;,\n      &quot;wwwroot/js/daterangepicker.js&quot;,\n      &quot;wwwroot/Scripts/SidebarScripts.js&quot;,\n      &quot;wwwroot/js/manifest.js&quot;,\n      &quot;wwwroot/js/slick.min.js&quot;,\n      &quot;wwwroot/js/site.min.js&quot;\n    ],\n    &quot;minify&quot;: {\n      &quot;enabled&quot;: true,\n      &quot;renameLocals&quot;: false\n    }\n  },\n  {\n    &quot;outputFileName&quot;: &quot;wwwroot/css/site.min.css&quot;,\n    &quot;inputFiles&quot;: [\n      &quot;wwwroot/css/font-awesome.min.css&quot;,\n      &quot;wwwroot/lib/bootstrap/dist/css/bootstrap.css&quot;,\n      &quot;wwwroot/css/angular-material.css&quot;,\n      &quot;wwwroot/css/styles.css&quot;,\n      &quot;wwwroot/css/emoticons.css&quot;,\n      &quot;wwwroot/css/vue-multiselect.min.css&quot;,\n      &quot;wwwroot/lib/Croppie/croppie.css&quot;,\n      &quot;wwwroot/css/jodit.min.css&quot;,\n      &quot;wwwroot/css/datepicker3.css&quot;,\n      &quot;wwwroot/css/toastr.min.css&quot;,\n      &quot;wwwroot/css/site.css&quot;\n    ],\n    &quot;minify&quot;: {\n      &quot;enabled&quot;: true,\n      &quot;renameLocals&quot;: false\n    }\n  }\n]</code></pre></div>\n<h4 id=\"step-5-build-bundle-file\" style=\"position:relative;\"><a href=\"#step-5-build-bundle-file\" aria-label=\"step 5 build bundle file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: Build Bundle File</h4>\n<p>After you finish do the setting we can build the bundle files.</p>\n<p>{% asset_img \"bundleRightClick.png\" \"Bundle Option\" %}</p>\n<p>Click on the <strong>Task Runner Explorer</strong> options you can set the build time of the bundle files </p>\n<p>{% asset_img \"taskRunnerExplorer.png\" \"Task Runnder\" %}</p>\n<p>you can update all files right now or you can set the build time of each file.</p>\n<h4 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h4>\n<p>Please do remember include your bundle files(e.g. site.min.css or site.min.js ....) in your layout file\nNow you can check from browser if your bundle file works or not.</p>","fields":{"slug":"improve-website-performance-by-using-bundling-net-core-2-1"},"frontmatter":{"title":"Improve Website Performance by using bundling(.Net Core 2.1)","date":"10.09.2018","category":"Coding","tags":[".net core"],"banner":"/assets/bg/3.jpg"},"timeToRead":3}},"pageContext":{"slug":"improve-website-performance-by-using-bundling-net-core-2-1","prev":null,"next":{"excerpt":"Scheduler in .Net Core 2.1 - Hangfire tutorial Background: I used to setup my project scheduler by using windows service, mostly sending emails, then I find a better library to do this task -- Hangfire. There are multiple reasons, the first is…","html":"<h3 id=\"scheduler-in-net-core-21---hangfire-tutorial\" style=\"position:relative;\"><a href=\"#scheduler-in-net-core-21---hangfire-tutorial\" aria-label=\"scheduler in net core 21   hangfire tutorial permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduler in .Net Core 2.1 - Hangfire tutorial</h3>\n<hr>\n<h4 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background:</h4>\n<p>I used to setup my project scheduler by using windows service, mostly sending emails, then I find a better library to do this task -- Hangfire. There are multiple reasons, the first is Hangfire is free!!! and then it provide dashboard to monitor and control your scheduled tasks, the last point is it is easy to setup.</p>\n<hr>\n<h4 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options:</h4>\n<p>Before we get into this Hangfire tutorial make sure you compare all the libraries otherwise you need to refactor your application which is waste of time. After compare these options and ask a friend, I decided to use Hangfire to handle the scheduling emails.</p>\n<p><strong>Scheduler and Job</strong></p>\n<ul>\n<li><a href=\"https://github.com/leosperry/Chroniton\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chroniton.NetCore</a> - Lightweight robust library for running tasks(jobs) on schedules.</li>\n<li><a href=\"https://github.com/jamesmh/coravel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coravel</a> - .Net Core meets Laravel: Scheduling, Queuing, etc.</li>\n<li><a href=\"https://github.com/fluentscheduler/FluentScheduler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FluentScheduler</a> - Automated job scheduler with fluent interface.</li>\n<li><a href=\"https://github.com/brthor/Gofer.NET\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gofer.NET</a> - Easy C# API for Distributed Background Tasks/Jobs for .NET Core. Inspired by celery for python.</li>\n<li><a href=\"https://github.com/HangfireIO/Hangfire\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HangfireIO</a> - Easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET apps <a href=\"http://hangfire.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://hangfire.io</a>.</li>\n<li><a href=\"https://github.com/prasannavl/LiquidState\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LiquidState</a> - Efficient asynchronous and synchronous state machines for .NET.</li>\n<li><a href=\"https://github.com/atifaziz/NCrontab\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NCrontab</a> - Crontab for .NET.</li>\n<li><a href=\"https://github.com/quartznet/quartznet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">quartznet</a> - Quartz Enterprise Scheduler .NET <a href=\"http://www.quartz-scheduler.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.quartz-scheduler.net</a>.</li>\n<li><a href=\"https://github.com/dotnet-state-machine/stateless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">stateless</a> - Simple library for creating state machines in C# code.</li>\n</ul>\n<p>This list comes from <a href=\"https://github.com/thangchung/awesome-dotnet-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome-dotnet-core</a></p>\n<hr>\n<p>Step 1: Installation</p>\n<p>I use NUGET package to install this library. I install these three library.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">&lt;PackageReference Include=&quot;Hangfire.AspNetCore&quot; Version=&quot;1.6.20&quot; /&gt;\n&lt;PackageReference Include=&quot;Hangfire.Dashboard.Authorization&quot; Version=&quot;2.1.0&quot; /&gt;\n&lt;PackageReference Include=&quot;Hangfire.SqlServer&quot; Version=&quot;1.6.20&quot; /&gt;</code></pre></div>\n<p>You can search them in NuGet Package Manager. The version number does not matter.</p>\n<p>Because I use .Net Core 2.1 so that I install Hangfire.AspNetCore rather than Hangfire please make sure you select the right one for your project. The Hangfire.Dashboard.Authorization is to implement the security feature which means it is optional and the SqlServer is a must-have.</p>\n<p>Step 2: Startup Configuration</p>\n<p>After the installation let's go to the <strong>Startup.cs</strong> file then you need to do the following things.</p>\n<p>Under the </p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public void ConfigureServices(IServiceCollection services)</code></pre></div>\n<p>Add the following code. These codes is to configure the Hangfire can access your database. </p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">services.AddHangfire(config =&gt;\n                config.UseSqlServerStorage(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));</code></pre></div>\n<p>Under the Configure</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public void Configure(IApplicationBuilder app, IHostingEnvironment env)</code></pre></div>\n<p>Add the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">app.UseHangfireDashboard();\napp.UseHangfireServer();</code></pre></div>\n<p>After you run your application you should be able to see your hangfire dashboard now.</p>\n<p>by adding hangfire after your root url.</p>\n<p>{% asset_img \"hangFire.PNG\" \"Dashboard\" %}</p>\n<p>Step 3: Security Setup</p>\n<p>Before we put this into production we need to make sure that this page is not accessible by others.</p>\n<p>This is my new <strong>Configure</strong> method in <strong>Startup.cs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n\n    \n\n    app.UseAuthentication();\n    app.UseHangfireServer();\n    app.UseHangfireDashboard(&quot;/hangfire&quot;, new DashboardOptions\n    {\n        Authorization = new[] { new HangfireAuthorizationFilter() },\n    });\n    \n    app.UseSignalR(routes =&gt;\n    {\n        routes.MapHub&lt;ChatHub&gt;(&quot;/chat&quot;);\n        routes.MapHub&lt;NotificationHub&gt;(&quot;/notification&quot;);\n    });\n\n    app.UseMvc(routes =&gt;\n    {\n        routes.MapRoute(\n            &quot;default&quot;,\n            &quot;{controller=Home}/{action=Index}/{id?}&quot;);\n        });\n\n}</code></pre></div>\n<p>And My HangfireAuthorizationFilter is like this you can use your own code.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public class HangfireAuthorizationFilter : IDashboardAuthorizationFilter\n{\n\n    public bool Authorize(DashboardContext context)\n    {\n        var httpContext = context.GetHttpContext();\n\n        return httpContext.User.IsAdmin();\n    }\n\n}</code></pre></div>\n<p>Step 4: Hangfire Controller</p>\n<p>The next step is to write the Hangfire jobs this depends on your needs I write the code in my Hangfire controller, but write it in your startup.cs is ok but not easy to maintain.</p>\n<p>Here is the example of recurrent jobs.</p>\n<p><a href=\"http://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html</a></p>\n<p>Step 5: Common mistakes</p>\n<p>To be continue</p>\n<p>Related Resources:</p>\n<p>These are some useful resources, maybe you will find them useful.</p>\n<p><a href=\"https://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx</a></p>\n<p><a href=\"https://dotnetthoughts.net/integrate-hangfire-with-aspnet-core/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dotnetthoughts.net/integrate-hangfire-with-aspnet-core/</a></p>\n<p><a href=\"http://docs.hangfire.io/en/latest/configuration/using-sql-server.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://docs.hangfire.io/en/latest/configuration/using-sql-server.html</a></p>\n<p><a href=\"https://codingsight.com/hangfire-task-scheduler-for-net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codingsight.com/hangfire-task-scheduler-for-net/</a></p>\n<p><a href=\"https://samueleresca.net/2017/12/background-tasks-in-asp-net-core/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://samueleresca.net/2017/12/background-tasks-in-asp-net-core/</a></p>\n<p><a href=\"http://www.talkingdotnet.com/integrate-hangfire-with-asp-net-core-web-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.talkingdotnet.com/integrate-hangfire-with-asp-net-core-web-api/</a></p>","id":"ea6f32c3-95d5-51e6-9147-251944128f7d","fields":{"slug":"scheduler-in-net-core-2-1-hangfire-tutorial"},"frontmatter":{"date":"2018-09-17","title":"Scheduler in .Net Core 2.1 - Hangfire tutorial","category":"Coding","tags":["Programming"],"banner":"/assets/bg/2.jpg"},"timeToRead":4}}},"staticQueryHashes":["3824141623"]}