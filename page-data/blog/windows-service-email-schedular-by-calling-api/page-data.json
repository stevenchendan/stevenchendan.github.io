{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/windows-service-email-schedular-by-calling-api","result":{"data":{"markdownRemark":{"html":"<h2 id=\"using-windows-service-to-call-api\" style=\"position:relative;\"><a href=\"#using-windows-service-to-call-api\" aria-label=\"using windows service to call api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Windows Service To Call API</h2>\n<hr>\n<p>Background: This week I set up a windows service to call my website API so that I can send unread notification weekly to our customers. I would like to share the process I have done so that you can save some time if you would like to do the same thing.</p>\n<p>Before read this blog I recommend you to have a look at Hangfire and quartz.net. If you find they are more suitable for you just jump to it. As windows service is not a suitable way to do scheduling in many cases.</p>\n<hr>\n<h4 id=\"why-windows-service\" style=\"position:relative;\"><a href=\"#why-windows-service\" aria-label=\"why windows service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why Windows Service?</h4>\n<p>I know there are some more continent ways to do the same thing especially on some cloud platform e.g. AWS, Azure... Because when I develop this feature I do not have the permission to access our AWS server and I am not familiar with AWS scheduler so that I choose windows service which is a bit of  legacy. I am pretty sure this is not the best option to do this Email Scheduler. I will keep updating this once I find a better solution.</p>\n<h4 id=\"prerequisite\" style=\"position:relative;\"><a href=\"#prerequisite\" aria-label=\"prerequisite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisite:</h4>\n<p>You need to install visual studio(I use VS2017) and then create new <strong>windows service</strong> project(under Visual C#-> Windows Desktop -> Windows Service(.Net Framework))</p>\n<h4 id=\"step-1\" style=\"position:relative;\"><a href=\"#step-1\" aria-label=\"step 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1:</h4>\n<p>In the <strong>Service1.cs</strong> file right click on the black area then click <strong>add installer</strong> then you should see two methods on the screen. Double click on any of them you should see this code below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public partial class ProjectInstaller : System.Configuration.Install.Installer\n{\n        public ProjectInstaller()\n        {\n            InitializeComponent();\n        }\n    \n        private void serviceProcessInstaller1_AfterInstall(object sender, InstallEventArgs e)\n        {\n    \n        }\n    \n        private void serviceInstaller1_AfterInstall(object sender, InstallEventArgs e)\n        {\n    \n        }\n}</code></pre></div>\n<p>Go to the definition of <strong>InitializeComponent()</strong> you should find the code snippiest below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">private void InitializeComponent()\n{\n    this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();\n    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();\n    // \n    // serviceProcessInstaller1\n    // \n    this.serviceProcessInstaller1.Password = null;\n    this.serviceProcessInstaller1.Username = null;\n    this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);\n    // \n    // serviceInstaller1\n    // \n    this.serviceInstaller1.ServiceName = &quot;Service1&quot;;\n    this.serviceInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceInstaller1_AfterInstall);\n    // \n    // ProjectInstaller\n    // \n    this.Installers.AddRange(new System.Configuration.Install.Installer[] {\n    this.serviceProcessInstaller1,\n    this.serviceInstaller1});\n}</code></pre></div>\n<p>We can change some settings of our installer.</p>\n<p>After changes my <strong>InitializeComponent()</strong> is like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">private void InitializeComponent()\n{\n    this.serviceProcessInstaller1 = new \t          System.ServiceProcess.ServiceProcessInstaller();\n    this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();\n    // \n    // serviceProcessInstaller1\n    // \n    this.serviceProcessInstaller1.AccountSystem.ServiceProcess.ServiceAccount.LocalSystem;\n    this.serviceProcessInstaller1.Password = null;\n    this.serviceProcessInstaller1.Username = null;\n    this.serviceProcessInstaller1.AfterInstall += new System.Configuration.Install.InstallEventHandler(this.serviceProcessInstaller1_AfterInstall);\n    // \n    // serviceInstaller1\n    // \n    this.serviceInstaller1.Description = &quot;Test&quot;;\n    this.serviceInstaller1.DisplayName = &quot;Test&quot;;\n    this.serviceInstaller1.ServiceName = &quot;Test&quot;;\n    // \n    // ProjectInstaller\n    // \n    this.Installers.AddRange(new System.Configuration.Install.Installer[]     {\n        this.serviceProcessInstaller1,\n\t    this.serviceInstaller1\n    });\n\n}</code></pre></div>\n<p>You can notice that I changed four lines in this method. The first one is the installation method. And the other three is name and descriptions.</p>\n<h4 id=\"step-2\" style=\"position:relative;\"><a href=\"#step-2\" aria-label=\"step 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2</h4>\n<p>After done with the installer we can move on to the main content of our service. Now let's go to the <strong>service1.cs</strong> file\nThere are three important method we need to understand. <strong>OnStart()</strong>,<strong>OnStop()</strong>,\n<strong>OnElapsedTime()</strong>. We need to use OnStart and OnElaspsedTime for this example.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">protected override void OnStart(string[] args)\n{\n    WriteToFile(&quot;Service is started at &quot; + DateTime.Now);\n    _timer.Elapsed += OnElapsedTime;\n    _timer.Interval =\n Convert.ToDouble(ConfigurationManager.AppSettings[&quot;TimerInterval&quot;]); \n    _timer.Enabled = true;\n}</code></pre></div>\n<p>This is my OnStart method. I use WriteToFile to do the log. I think it is a good practice to write your time related information in your setting file. You can see the <strong>TimeInterval</strong> is from my <strong>App.config</strong> file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;appSettings&gt;\n    &lt;add key=&quot;TimerInterval&quot; value=&quot;60000&quot;/&gt;\n&lt;/appSettings&gt;</code></pre></div>\n<p>Below is the WriteToFile method I use. This mainly for loggin my service running condition.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public void WriteToFile(string message)\n{\n    var path = AppDomain.CurrentDomain.BaseDirectory + &quot;\\\\Logs&quot;;\n    if (!Directory.Exists(path))\n        Directory.CreateDirectory(path);\n    var filepath = AppDomain.CurrentDomain.BaseDirectory + &quot;\\\\Logs\\\\ServiceLog_&quot; + DateTime.Now.Date.ToShortDateString().Replace(&#39;/&#39;, &#39;_&#39;) + &quot;.txt&quot;;\n    if (!File.Exists(filepath))\n    using (var sw = File.CreateText(filepath))\n    {\n    sw.WriteLine(message);\n    }\n    else\n    using (var sw = File.AppendText(filepath))\n    {\n    sw.WriteLine(message);\n    }\n}</code></pre></div>\n<h4 id=\"step-3important\" style=\"position:relative;\"><a href=\"#step-3important\" aria-label=\"step 3important permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3(!important)</h4>\n<p><strong>OnElapsedTime()</strong> this is place we will execute our program.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">private void OnElapsedTime(object source, ElapsedEventArgs e)\n{\n    var userMessageAlertTime = ConfigurationManager.AppSettings[&quot;UserMessagesAlert&quot;];\n    var adminProjectAlertTime = ConfigurationManager.AppSettings[&quot;AdminProjectUpdates&quot;];\n    if (CheckTimeMatch(userMessageAlertTime,e.SignalTime))\nNewMessageNotification();\n    if (CheckTimeMatch(adminProjectAlertTime, e.SignalTime))\nProjectUpdatesNotification();\n    WriteToFile(&quot;Service is recall at &quot; + DateTime.UtcNow);\n}</code></pre></div>\n<p>Once the time match with time in my config file I will call this api. The api detail is also in my setting.</p>\n<p>There is important thing to do is the security I will talk about it in the near future.</p>\n<h4 id=\"step-4-deployment\" style=\"position:relative;\"><a href=\"#step-4-deployment\" aria-label=\"step 4 deployment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4 Deployment</h4>\n<p>Finally we need to deploy our program. first build your project in visual studio. Then open your <strong>CMD</strong> as Admin(right click - run as administrator )</p>\n<p><strong>Installation:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe&quot; &quot;C:\\Users\\Gatehouse\\source\\repos\\WindowsServiceTest\\WindowsServiceTest\\bin\\Debug\\WindowsServiceTest.exe&quot;</code></pre></div>\n<p><strong>Uninstallation:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe&quot; -u  &quot;C:\\Users\\Gatehouse\\source\\repos\\WindowsServiceTest\\WindowsServiceTest\\bin\\Debug\\WindowsServiceTest.exe&quot;</code></pre></div>\n<p><strong>Step 5 Run This Service</strong></p>\n<p>After deployment you should see your service in the service list(cmd -> enter service).</p>\n<p>If there is no problem after you right click on service and select run. Your service should be ready. You can check your log folder.</p>\n<p>I will update once I find better practice.</p>","fields":{"slug":"windows-service-email-schedular-by-calling-api"},"frontmatter":{"title":"Windows Service Email Schedular(By Calling Api)","date":"25.09.2018","category":"Coding","tags":["Programming"],"banner":"/assets/bg/2.jpg"},"timeToRead":5}},"pageContext":{"slug":"windows-service-email-schedular-by-calling-api","prev":{"excerpt":"Scheduler in .Net Core 2.1 - Hangfire tutorial Background: I used to setup my project scheduler by using windows service, mostly sending emails, then I find a better library to do this task -- Hangfire. There are multiple reasons, the first is…","html":"<h3 id=\"scheduler-in-net-core-21---hangfire-tutorial\" style=\"position:relative;\"><a href=\"#scheduler-in-net-core-21---hangfire-tutorial\" aria-label=\"scheduler in net core 21   hangfire tutorial permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduler in .Net Core 2.1 - Hangfire tutorial</h3>\n<hr>\n<h4 id=\"background\" style=\"position:relative;\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background:</h4>\n<p>I used to setup my project scheduler by using windows service, mostly sending emails, then I find a better library to do this task -- Hangfire. There are multiple reasons, the first is Hangfire is free!!! and then it provide dashboard to monitor and control your scheduled tasks, the last point is it is easy to setup.</p>\n<hr>\n<h4 id=\"options\" style=\"position:relative;\"><a href=\"#options\" aria-label=\"options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Options:</h4>\n<p>Before we get into this Hangfire tutorial make sure you compare all the libraries otherwise you need to refactor your application which is waste of time. After compare these options and ask a friend, I decided to use Hangfire to handle the scheduling emails.</p>\n<p><strong>Scheduler and Job</strong></p>\n<ul>\n<li><a href=\"https://github.com/leosperry/Chroniton\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chroniton.NetCore</a> - Lightweight robust library for running tasks(jobs) on schedules.</li>\n<li><a href=\"https://github.com/jamesmh/coravel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coravel</a> - .Net Core meets Laravel: Scheduling, Queuing, etc.</li>\n<li><a href=\"https://github.com/fluentscheduler/FluentScheduler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FluentScheduler</a> - Automated job scheduler with fluent interface.</li>\n<li><a href=\"https://github.com/brthor/Gofer.NET\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gofer.NET</a> - Easy C# API for Distributed Background Tasks/Jobs for .NET Core. Inspired by celery for python.</li>\n<li><a href=\"https://github.com/HangfireIO/Hangfire\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HangfireIO</a> - Easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET apps <a href=\"http://hangfire.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://hangfire.io</a>.</li>\n<li><a href=\"https://github.com/prasannavl/LiquidState\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LiquidState</a> - Efficient asynchronous and synchronous state machines for .NET.</li>\n<li><a href=\"https://github.com/atifaziz/NCrontab\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NCrontab</a> - Crontab for .NET.</li>\n<li><a href=\"https://github.com/quartznet/quartznet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">quartznet</a> - Quartz Enterprise Scheduler .NET <a href=\"http://www.quartz-scheduler.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.quartz-scheduler.net</a>.</li>\n<li><a href=\"https://github.com/dotnet-state-machine/stateless\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">stateless</a> - Simple library for creating state machines in C# code.</li>\n</ul>\n<p>This list comes from <a href=\"https://github.com/thangchung/awesome-dotnet-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">awesome-dotnet-core</a></p>\n<hr>\n<p>Step 1: Installation</p>\n<p>I use NUGET package to install this library. I install these three library.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">&lt;PackageReference Include=&quot;Hangfire.AspNetCore&quot; Version=&quot;1.6.20&quot; /&gt;\n&lt;PackageReference Include=&quot;Hangfire.Dashboard.Authorization&quot; Version=&quot;2.1.0&quot; /&gt;\n&lt;PackageReference Include=&quot;Hangfire.SqlServer&quot; Version=&quot;1.6.20&quot; /&gt;</code></pre></div>\n<p>You can search them in NuGet Package Manager. The version number does not matter.</p>\n<p>Because I use .Net Core 2.1 so that I install Hangfire.AspNetCore rather than Hangfire please make sure you select the right one for your project. The Hangfire.Dashboard.Authorization is to implement the security feature which means it is optional and the SqlServer is a must-have.</p>\n<p>Step 2: Startup Configuration</p>\n<p>After the installation let's go to the <strong>Startup.cs</strong> file then you need to do the following things.</p>\n<p>Under the </p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public void ConfigureServices(IServiceCollection services)</code></pre></div>\n<p>Add the following code. These codes is to configure the Hangfire can access your database. </p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">services.AddHangfire(config =&gt;\n                config.UseSqlServerStorage(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));</code></pre></div>\n<p>Under the Configure</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public void Configure(IApplicationBuilder app, IHostingEnvironment env)</code></pre></div>\n<p>Add the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">app.UseHangfireDashboard();\napp.UseHangfireServer();</code></pre></div>\n<p>After you run your application you should be able to see your hangfire dashboard now.</p>\n<p>by adding hangfire after your root url.</p>\n<p>{% asset_img \"hangFire.PNG\" \"Dashboard\" %}</p>\n<p>Step 3: Security Setup</p>\n<p>Before we put this into production we need to make sure that this page is not accessible by others.</p>\n<p>This is my new <strong>Configure</strong> method in <strong>Startup.cs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n\n    \n\n    app.UseAuthentication();\n    app.UseHangfireServer();\n    app.UseHangfireDashboard(&quot;/hangfire&quot;, new DashboardOptions\n    {\n        Authorization = new[] { new HangfireAuthorizationFilter() },\n    });\n    \n    app.UseSignalR(routes =&gt;\n    {\n        routes.MapHub&lt;ChatHub&gt;(&quot;/chat&quot;);\n        routes.MapHub&lt;NotificationHub&gt;(&quot;/notification&quot;);\n    });\n\n    app.UseMvc(routes =&gt;\n    {\n        routes.MapRoute(\n            &quot;default&quot;,\n            &quot;{controller=Home}/{action=Index}/{id?}&quot;);\n        });\n\n}</code></pre></div>\n<p>And My HangfireAuthorizationFilter is like this you can use your own code.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public class HangfireAuthorizationFilter : IDashboardAuthorizationFilter\n{\n\n    public bool Authorize(DashboardContext context)\n    {\n        var httpContext = context.GetHttpContext();\n\n        return httpContext.User.IsAdmin();\n    }\n\n}</code></pre></div>\n<p>Step 4: Hangfire Controller</p>\n<p>The next step is to write the Hangfire jobs this depends on your needs I write the code in my Hangfire controller, but write it in your startup.cs is ok but not easy to maintain.</p>\n<p>Here is the example of recurrent jobs.</p>\n<p><a href=\"http://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html</a></p>\n<p>Step 5: Common mistakes</p>\n<p>To be continue</p>\n<p>Related Resources:</p>\n<p>These are some useful resources, maybe you will find them useful.</p>\n<p><a href=\"https://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.hanselman.com/blog/HowToRunBackgroundTasksInASPNET.aspx</a></p>\n<p><a href=\"https://dotnetthoughts.net/integrate-hangfire-with-aspnet-core/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dotnetthoughts.net/integrate-hangfire-with-aspnet-core/</a></p>\n<p><a href=\"http://docs.hangfire.io/en/latest/configuration/using-sql-server.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://docs.hangfire.io/en/latest/configuration/using-sql-server.html</a></p>\n<p><a href=\"https://codingsight.com/hangfire-task-scheduler-for-net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codingsight.com/hangfire-task-scheduler-for-net/</a></p>\n<p><a href=\"https://samueleresca.net/2017/12/background-tasks-in-asp-net-core/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://samueleresca.net/2017/12/background-tasks-in-asp-net-core/</a></p>\n<p><a href=\"http://www.talkingdotnet.com/integrate-hangfire-with-asp-net-core-web-api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.talkingdotnet.com/integrate-hangfire-with-asp-net-core-web-api/</a></p>","id":"ea6f32c3-95d5-51e6-9147-251944128f7d","fields":{"slug":"scheduler-in-net-core-2-1-hangfire-tutorial"},"frontmatter":{"date":"2018-09-17","title":"Scheduler in .Net Core 2.1 - Hangfire tutorial","category":"Coding","tags":["Programming"],"banner":"/assets/bg/2.jpg"},"timeToRead":4},"next":null}},"staticQueryHashes":["3824141623"]}